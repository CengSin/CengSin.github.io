<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CengSin PERSONAL BLOG</title><link>/</link><description>Recent content on CengSin PERSONAL BLOG</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 27 Jun 2025 20:16:02 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>从小米YU7爆火看如今国内的品牌现状</title><link>/posts/%E4%BB%8E%E5%B0%8F%E7%B1%B3yu7%E7%88%86%E7%81%AB%E7%9C%8B%E5%A6%82%E4%BB%8A%E5%9B%BD%E5%86%85%E7%9A%84%E5%93%81%E7%89%8C%E7%8E%B0%E7%8A%B6/</link><pubDate>Fri, 27 Jun 2025 20:16:02 +0800</pubDate><guid>/posts/%E4%BB%8E%E5%B0%8F%E7%B1%B3yu7%E7%88%86%E7%81%AB%E7%9C%8B%E5%A6%82%E4%BB%8A%E5%9B%BD%E5%86%85%E7%9A%84%E5%93%81%E7%89%8C%E7%8E%B0%E7%8A%B6/</guid><description>&lt;h1 id="原版">原版&lt;/h1>
&lt;h2 id="从小米yu7爆火看国产品牌的真实现状">从小米YU7爆火，看国产品牌的真实现状&lt;/h2>
&lt;h3 id="3分钟大定200000这个世界好像只有我在消费降级吗">“3分钟大定200000，这个世界好像只有我在消费降级吗？”&lt;/h3>
&lt;p>小米汽车的评论区最多的就是这句话。2025年国内经济低速增长的情况下，小米汽车的爆火揭示了中国市场正在悄然发生的变化。&lt;/p>
&lt;h3 id="混乱的市场">混乱的市场&lt;/h3>
&lt;p>90后、00后出了社会总是有种上当的感觉，各种付费商品的体验总是不舒服。从进入门店开始，销售的眼光、言语、各种套餐、名词层出不同。非要把你绕晕了、忘记自己最开始需求，付钱购买了好像和需求差了那么一点的商品，然后走出去。售后？这种服务根本不存在。只有闹事才能维护自己的权益。&lt;/p>
&lt;p>但是就是这样的服务充斥着早些年的中国市场，去哪都一样，说不准还有强买强卖的事情发生。&lt;/p>
&lt;h3 id="淘宝小米蜜雪冰城">淘宝、小米、蜜雪冰城&lt;/h3>
&lt;p>这三家应该是透明、品质、售后这些名词的市场实体代表。&lt;/p>
&lt;blockquote>
&lt;p>良好的品质、透明的价格、省心的售后&lt;/p>&lt;/blockquote>
&lt;p>淘宝这类电商直接打击了电器城，电器城的衰落就是中国市场从混乱走向透明、品质、售后的开始&lt;/p>
&lt;p>小米通过“性价比”确定了自己的市场地位，只不过当时经济是一个快速发展的过程，这是的「性价比」更不被“吃满了时代红利，满嘴流油”的用户接受。“屌丝、性价比、低价”成为了小米的标签。&lt;/p>
&lt;p>蜜雪冰城通过“低价高质”在河南萌芽，之后通过大量加盟、同时保证价格和品质的上限和下限在短时间内迅速成为了国内茶饮行业的老大。同样在“满嘴流油”的时代，蜜雪冰城也是“屌丝”这类形容边缘型群体的标签。&lt;/p>
&lt;h3 id="质量决定市场的时代">质量决定市场的时代&lt;/h3>
&lt;p>淘宝的产品是购物体验，商品品质以及售后保证。&lt;/p>
&lt;p>小米的产品是良好的品质、透明的价格以及售后保证。&lt;/p>
&lt;p>蜜雪冰城的产品是雪王形象、物流链路和原料品质，人员培训。&lt;/p>
&lt;p>在现在的经济环境下，90后、00后还没挣到钱就先被社会给上了好几课。过去那些「高级、小众」如今也变成了「噶韭菜」，消费市场已经从「情绪和服务决定价格」转变到了「质量和售后决定价格」的市场。未来市场中一味用「高级」来标榜自己的品牌会丧失自己在自由市场的地位，而「品质」的品牌会加速扩大自己的市场。&lt;/p>
&lt;p>中国的“优衣库”们将会在未来的市场出现，并且走向世界。&lt;/p>
&lt;h1 id="chatgpt修改版本">ChatGPT修改版本&lt;/h1>
&lt;h2 id="从小米yu7爆火看国产品牌的真实现状-1">从小米YU7爆火，看国产品牌的真实现状&lt;/h2>
&lt;h3 id="3分钟大定20万这个世界只有我在消费降级吗">“3分钟大定20万，这个世界只有我在消费降级吗？”&lt;/h3>
&lt;p>小米汽车发布当天，评论区里这句高赞留言反映出一个鲜明对比：在2025年整体经济放缓的大背景下，小米YU7却逆势爆火，似乎揭示出消费市场中正在悄然发生的结构性变化。&lt;/p>
&lt;hr>
&lt;h3 id="从糊涂消费到理性选择">从“糊涂消费”到“理性选择”&lt;/h3>
&lt;p>90后、00后走入社会后，普遍有种“总在被坑”的感受。线下消费从踏入门店那一刻起，就被复杂的销售话术、价格套路、隐藏成本所包围。最终付钱的，常常不是自己真正需要的，而是被“绕晕”后的妥协。更糟的是，出了问题想维权，售后几乎等于摆设，只有闹才有回应。&lt;/p>
&lt;p>这种“卖方为王”、服务混乱的市场，在十多年前的中国几乎无处不在。&lt;/p>
&lt;hr>
&lt;h3 id="淘宝小米蜜雪冰城理性消费的样板">淘宝、小米、蜜雪冰城：理性消费的样板&lt;/h3>
&lt;p>在这样的背景下，淘宝、小米、蜜雪冰城三者，是“透明、品质、售后”理念落地的先行者：&lt;/p>
&lt;blockquote>
&lt;p>他们不是在卖产品，而是在重塑消费者的信任。&lt;/p>&lt;/blockquote>
&lt;p>淘宝带来了价格公开、比价便利、售后保障，直接终结了“电器城”模式的生存空间，开启了透明化消费的时代。&lt;/p>
&lt;p>小米凭借“性价比”迅速崛起，但当时处于高速增长的经济阶段，许多中产并不买账，小米一度被贴上“屌丝”“低端”的标签。&lt;/p>
&lt;p>蜜雪冰城以“低价高质”在河南发芽，通过标准化加盟体系，既压住了价格下限，也守住了品质上限，迅速拿下国内茶饮市场的头部地位。它的成功，曾同样被人视为“屌丝文化”的代表。&lt;/p>
&lt;hr>
&lt;h3 id="品质是新的高级感">品质是新的“高级感”&lt;/h3>
&lt;p>今天的90后、00后没有赶上资产和工资齐飞的年代，反而在各种“收割”中学会了精明。他们不再相信“高级”=“值得买”，而是将注意力转向了“质量”和“售后”。&lt;/p>
&lt;p>现在的品牌竞争，已经从“讲故事”变成了“做实事”。&lt;/p>
&lt;p>淘宝、小米、蜜雪冰城成功的本质，是对“消费体验”的精准把控：从商品品质到售后流程，从价格透明到运营形象，每个环节都在打磨可信度。&lt;/p>
&lt;hr>
&lt;h3 id="未来的国产品牌将走向何方">未来的国产品牌，将走向何方？&lt;/h3>
&lt;p>曾经靠“调性”“概念”打动人的品牌，如今正陷入增长瓶颈。而那些脚踏实地、注重产品和服务体验的企业，却在逐步赢得市场。&lt;/p>
&lt;p>中国消费者越来越理性：不盲目追求奢华，但极度重视性价比和可靠性。&lt;/p>
&lt;p>国产的“优衣库”式品牌，将不再是例外，而是新常态。&lt;/p></description></item><item><title>Go语言实现的APNs推送服务：一次稳定性问题的排查与优化实录</title><link>/posts/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84apns%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%E4%B8%80%E6%AC%A1%E7%A8%B3%E5%AE%9A%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E5%BD%95/</link><pubDate>Fri, 27 Jun 2025 14:26:00 +0800</pubDate><guid>/posts/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84apns%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%E4%B8%80%E6%AC%A1%E7%A8%B3%E5%AE%9A%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E5%BD%95/</guid><description>&lt;h1 id="go语言实现的apns推送服务一次稳定性问题的排查与优化实录">Go语言实现的APNs推送服务：一次稳定性问题的排查与优化实录&lt;/h1>
&lt;p>在生产环境中部署 APNs 推送服务时，我们遇到了一个让人头疼的问题：&lt;strong>服务运行约一周后，会突然停止推送消息&lt;/strong>，且腾讯云实例的内存占用达到 100%。本文将详细记录从最初的异常现象，到最后稳定运行的整个排查与优化过程，希望对你构建稳定、高效的 Go 推送服务有所帮助。&lt;/p>
&lt;hr>
&lt;h2 id="异步问题">异步问题&lt;/h2>
&lt;p>生产环境下，程序运行约一周后推送功能会失效。梳理相关代码流程如下：&lt;/p>
&lt;p>生产者将消息放入队列A，Consumer-A消费后同步将响应写入队列B。Consumer-B同步消费队列B，将推送结果写入缓存，随后通过定时任务批量保存到数据库。&lt;/p>
&lt;p>问题出在队列B：高峰期Consumer-B消费速度慢于Consumer-A，导致队列B被填满。此时，推送响应阻塞在写入队列B的操作上，程序不断创建新的goroutine，最终内存耗尽导致服务崩溃。&lt;/p>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>简化代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 优化塞入消费队列B的操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">channelB&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，当channelB已满时，1秒超时后直接丢弃响应，避免Consumer-A因阻塞而无限制创建goroutine。&lt;/p>
&lt;h2 id="一问题现象与初步排查">一、问题现象与初步排查&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>初始配置&lt;/strong>：服务启动时会根据配置创建 &lt;code>200 个 httpClient&lt;/code>，每个 client 启动 &lt;code>400 个 goroutine&lt;/code>，总计约 &lt;strong>8 万个 goroutine&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>问题表现&lt;/strong>：服务运行一周左右后 &lt;strong>完全停止推送&lt;/strong>，同时腾讯云实例内存占用达到 &lt;strong>100%&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>第一步尝试&lt;/strong>：简单地提升云主机内存，但问题并未解决，&lt;strong>仅仅延后了推送停滞的时间&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="二深入阅读源码找出并发模型的问题">二、深入阅读源码，找出并发模型的问题&lt;/h2>
&lt;ul>
&lt;li>阅读代码后发现，每个 HTTP client 会配套启动 goroutine 队列，导致 goroutine 数量极度膨胀。&lt;/li>
&lt;li>初步怀疑 goroutine 与连接数的组合导致了内存膨胀与资源抢占。&lt;/li>
&lt;/ul>
&lt;h3 id="-动作调整配置">🔧 动作：调整配置&lt;/h3>
&lt;ul>
&lt;li>将配置修改为：&lt;code>10 个 httpClient&lt;/code>，每个 client 启动 &lt;code>100 个 goroutine&lt;/code>。&lt;/li>
&lt;li>&lt;strong>效果&lt;/strong>：内存占用明显降低，但 &lt;strong>推送停止问题依然存在&lt;/strong>，只是&lt;strong>发生时间变长了&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="三提高日志等级捕获-apns-的-goaway-信号">三、提高日志等级，捕获 APNs 的 GOAWAY 信号&lt;/h2>
&lt;ul>
&lt;li>将日志级别调为 &lt;code>Error&lt;/code>，观察关键错误。&lt;/li>
&lt;li>发现日志中频繁出现：&lt;code>http2: received GOAWAY&lt;/code> 的错误。&lt;/li>
&lt;/ul>
&lt;h3 id="-理解-goaway">🧠 理解 GOAWAY：&lt;/h3>
&lt;ul>
&lt;li>GOAWAY 是 HTTP/2 协议中服务端通知关闭连接的帧。&lt;/li>
&lt;li>APNs 服务器可能因&lt;strong>连接使用过度&lt;/strong>或&lt;strong>资源占用过多&lt;/strong>而主动断开。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="四实现连接重建逻辑">四、实现连接重建逻辑&lt;/h2>
&lt;h3 id="-初步方案">🛠 初步方案：&lt;/h3>
&lt;ul>
&lt;li>在捕获到 &lt;code>http2.GoAwayError&lt;/code> 时，调用 &lt;code>replaceTransport()&lt;/code> 逻辑，重建 HTTP 客户端连接。&lt;/li>
&lt;/ul>
&lt;h3 id="-遇到问题">🐞 遇到问题：&lt;/h3>
&lt;ul>
&lt;li>日志中发现：&lt;code>interface conversion: error is *errors.errorString, not http2.GoAwayError&lt;/code>&lt;/li>
&lt;li>原因是代码错误地将 &lt;code>error&lt;/code> 类型直接断言为 &lt;code>http2.GoAwayError&lt;/code>，导致 panic。&lt;/li>
&lt;/ul>
&lt;h3 id="-修复方式">✅ 修复方式：&lt;/h3>
&lt;p>使用 &lt;code>errors.As()&lt;/code> 安全判断底层错误类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">goAwayErr&lt;/span> &lt;span style="color:#a6e22e">http2&lt;/span>.&lt;span style="color:#a6e22e">GoAwayError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">As&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">goAwayErr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 正确捕获 GOAWAY 错误&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">replaceHttpClient&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-发布后验证">🟢 发布后验证：&lt;/h3>
&lt;ul>
&lt;li>日志中确认 &lt;code>replaceTransport()&lt;/code> 被触发。&lt;/li>
&lt;li>GOAWAY 后能自动重连，服务持续运行未中断。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="五当前配置与运行状态">五、当前配置与运行状态&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>httpClient 数量&lt;/strong>：50&lt;/li>
&lt;li>&lt;strong>每个 Client goroutine 数量&lt;/strong>：200&lt;/li>
&lt;li>&lt;strong>状态&lt;/strong>：服务稳定运行，内存占用合理，GOAWAY 可自愈处理。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="六后续优化建议">六、后续优化建议&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>优化方向&lt;/th>
&lt;th>建议&lt;/th>
&lt;th>目的&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>连接池管理&lt;/td>
&lt;td>- 统一使用 &lt;code>http.Transport&lt;/code>，设置 &lt;code>MaxIdleConnsPerHost&lt;/code> 充足&lt;!-- raw HTML omitted -->- 避免每个 client 自建 Transport&lt;/td>
&lt;td>提升连接复用率，减少建连开销&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>并发动态调整&lt;/td>
&lt;td>- 监控 GOAWAY、重试次数&lt;!-- raw HTML omitted -->- 高负载时自动降并发&lt;/td>
&lt;td>降低 APNs 断连接概率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内存与 GC 监控&lt;/td>
&lt;td>- 启用 &lt;code>pprof&lt;/code>&lt;!-- raw HTML omitted -->- 定期抓取堆快照&lt;/td>
&lt;td>及时发现 goroutine 或对象泄漏&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>错误分类重试&lt;/td>
&lt;td>- 区分 GOAWAY / 网络失败 / 非重试错误&lt;/td>
&lt;td>提高重试成功率、减少资源浪费&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指标监控告警&lt;/td>
&lt;td>- 集成 Prometheus/Grafana&lt;!-- raw HTML omitted -->- 监控连接数、错误率、推送成功率等&lt;/td>
&lt;td>快速发现问题趋势，防患未然&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="七小结">七、小结&lt;/h2>
&lt;p>通过本次稳定性问题的排查，你已经：&lt;/p>
&lt;ul>
&lt;li>识别出 goroutine 与内存暴涨之间的因果关系；&lt;/li>
&lt;li>正确理解并处理了 HTTP/2 的 GOAWAY 机制；&lt;/li>
&lt;li>用日志 + 错误类型匹配的方式，实现了连接重建的自愈逻辑；&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>稳定的系统不是不出错，而是能&lt;strong>及时感知和快速恢复&lt;/strong>。这次经历非常有代表性，也为你构建更健壮的推送服务打下了基础。&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>如果你有类似服务，也欢迎参考这份经验流程，或与我交流进一步的系统设计和优化策略。&lt;/p></description></item><item><title>回旋镖的数量</title><link>/posts/number_of_boomerangs/</link><pubDate>Mon, 13 Sep 2021 11:15:13 +0800</pubDate><guid>/posts/number_of_boomerangs/</guid><description>&lt;h1 id="回旋镖的数量">回旋镖的数量&lt;/h1>
&lt;pre tabindex="0">&lt;code>给定平面上 n 对 互不相同 的点 points ，其中 points[i] = [xi, yi] 。
回旋镖 是由点 (i, j, k) 表示的元组 ，
其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。
返回平面上所有回旋镖的数量。
示例 1：
输入：points = [[0,0],[1,0],[2,0]]
输出：2
解释：两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]
示例 2：
输入：points = [[1,1],[2,2],[3,3]]
输出：2
示例 3：
输入：points = [[1,1]]
输出：0
&lt;/code>&lt;/pre>&lt;p>首先写一下自己的思路：本来我的思路是回旋镖中间的点到两边的点距离肯定是相同的。那么求回旋镖的数量就是
拿到一个符合中间点到两边点相同距离的元组的数量。到考虑元组的顺序这点我开始纠结了。这里记录一下。&lt;/p>
&lt;p>&lt;strong>元组的顺序肯定是不相同的，这里需要用到排列组合中的概念。&lt;/strong>&lt;/p>
&lt;p>回想一下我的思路，一个点到其他两个点的距离相同。&lt;/p>
&lt;p>Leetcode这里抽象成了到某个点距离相同的所有点的距离 m , 那么在m个点中拿出两个点与最外层点p组合成一个
回旋镖的元组即为排列，A(2, m) = m * (m - 1)&lt;/p>
&lt;p>看代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">numberOfBoomerangs&lt;/span>(&lt;span style="color:#a6e22e">points&lt;/span> [][]&lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cnt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dis&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cnt&lt;/span>[&lt;span style="color:#a6e22e">dis&lt;/span>] &lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">cnt&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>不包含连续的1的整数</title><link>/posts/non_negative_integers_without_consecutive_ones/</link><pubDate>Sun, 12 Sep 2021 15:39:42 +0800</pubDate><guid>/posts/non_negative_integers_without_consecutive_ones/</guid><description>&lt;h1 id="不包含连续的1的整数">不包含连续的1的整数&lt;/h1>
&lt;blockquote>
&lt;p>给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 连续的1 的个数。&lt;/p>&lt;/blockquote>
&lt;p>示例 1:&lt;/p>
&lt;p>输入: 5&lt;/p>
&lt;p>输出: 5&lt;/p>
&lt;p>解释:
下面是带有相应二进制表示的非负整数&amp;lt;= 5：&lt;/p>
&lt;pre tabindex="0">&lt;code>0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
&lt;/code>&lt;/pre>&lt;p>其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。&lt;/p>
&lt;p>说明: 1 &amp;lt;= n &amp;lt;= 10^9&lt;/p>
&lt;p>根据题目描述，我们可以拿到1～n每个数字的二进制，然后计算二进制不包含连续的1的整数的数量，返回即可。但是
题目中的n的取值范围为[1,10^9]，暴力肯定会超时。&lt;/p>
&lt;p>我们要计算的是[0,n]范围内数字二进制不包含连续1的个数。&lt;/p>
&lt;p>假设数字n的二进制位为：1001001，如何计算范围内数字二进制不包含连续1的个数？&lt;/p>
&lt;p>首先我们假设数字开头为0，数字表示为0xxxxxx。0之后的二进制可以为1，可以为0。在这种情况下，我们唯一能够
确定的就是，开头的0那一位。xxxxxx中有多少个不包含连续1数字呢？我们先记下这个子问题。&lt;/p>
&lt;p>其次我们假设数字开头为1，那么1之后的二进制位必须为0。重申一下，二进制中不包含连续1的数字。那么我们可以确定
开头的两位二进制10。那么数字可以表示为10xxxxx。xxxxx中有多少个不包含连续1的数字呢？&lt;/p>
&lt;p>声明一个数组dp，下标i表示长度为i的二进制。&lt;strong>dp[i]表示该二进制位不包含连续的1的数量&lt;/strong>。由于
数字的二进制的每一位不是0就是1，如果一个二进制的开头为0，那么它的的下一位就可以选择0，或者1。如果一个二
进制的开头为1，那么它的下一位只能是0，如果是1的话就不符合题目中要求的不包含连续的1。由此可以得出：&lt;/p>
&lt;p>dp[i] = dp[i - 1] + dp[i - 2]&lt;/p>
&lt;p>dp[i - 1] 表示 0开头的，长度为i-1的二进制中不包含连续1的数量
dp[i - 2] 表示 10开头的，长度为i-2的二进制中不包含连续1的数量&lt;/p>
&lt;p>终止条件为：&lt;/p>
&lt;p>dp[0] = 1
dp[1] = 2&lt;/p>
&lt;p>例如：1001001&lt;/p>
&lt;p>首先要考虑： 0000000～01111111 中不包含连续1的数字的数量&lt;/p>
&lt;p>然后就是：1000000～1001001 中不包含连续1的数字的数量 ( ？)&lt;/p>
&lt;p>怎么求1000000～1001001 中不包含连续1的数字的数量 ( ？)呢，我们可以计算&lt;/p>
&lt;p>1000000~10000111和1001000到1001001的数量。&lt;/p>
&lt;p>考虑一下边界条件：
1001101，这种情况下，我们需要对每个为1的二进制位记录他的前一位二进制，如果两者都为1，那么返回false。否则返回true。&lt;/p>
&lt;h4 id="代码">代码&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">findIntegers&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">dp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>, [&lt;span style="color:#ae81ff">32&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>} &lt;span style="color:#75715e">// k = 32是要从2^32（最大）开始计算&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">k&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span> = &lt;span style="color:#ae81ff">31&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">k&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pre&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pre&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ans&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用rand7实现rand10</title><link>/posts/implement_rand10_use_rand7/</link><pubDate>Sun, 05 Sep 2021 14:50:20 +0800</pubDate><guid>/posts/implement_rand10_use_rand7/</guid><description>&lt;h1 id="使用rand7实现rand10">使用rand7实现rand10&lt;/h1>
&lt;p>题目：&lt;/p>
&lt;pre tabindex="0">&lt;code>已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。
不要使用系统的 Math.random() 方法。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/implement-rand10-using-rand7
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
&lt;/code>&lt;/pre>&lt;p>结论：&lt;/p>
&lt;ol>
&lt;li>(RAND_X - 1) * Y + RAND_Y = RAND_X*Y&lt;/li>
&lt;li>RAND_X*Y % Y + 1 = RAND_Y&lt;/li>
&lt;/ol>
&lt;p>证明结论1：&lt;/p>
&lt;p>使用rand2生成rand4&lt;/p>
&lt;p>使用 rand2_Row + rand2_Col 生成的随机数为：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Col\Row&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>结果生成的范围为[2,4]&lt;/p>
&lt;p>然后我们缩小结果的范围，用 rand2_Row - 1 替换 原来式子中的 rand2_Row，上面的式子就变成了：(rand2_Row - 1) + rand2_Col&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Col\Row&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>结果生成的范围为[1,3]。但显然结果出现的概论并不是平均的，1，3的概率分别为25%，2的概率最大，为50%。&lt;/p>
&lt;p>之后我们使用 (rand2_Row - 1) * 2 + rand2_Col&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Col\Row&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(1,2,3,4)出现的结果为均衡的概率。&lt;/p>
&lt;p>之后将结论带入(rand2 - 1) * 3 + rand3 == rand6&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Col\Row&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>证明结论2：&lt;/p>
&lt;p>rand4 % 2 + 1 = rand2&lt;/p>
&lt;ul>
&lt;li>1 % 2 + 1 = 2&lt;/li>
&lt;li>2 % 2 + 1 = 1&lt;/li>
&lt;li>3 % 2 + 1 = 2&lt;/li>
&lt;li>4 % 2 + 1 = 1&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;p>使用rand7生成rand10&lt;/p>
&lt;p>我们可以使用第一个结论&lt;/p>
&lt;p>(rand7 - 1) * 7 + rand7 = rand49&lt;/p>
&lt;p>因为rand49不是rand10的倍数，所以我们要抛弃[41, 49]之间的数字：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">rand10&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#a6e22e">rand7&lt;/span>() &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">rand7&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种结论的最坏情况可能会超时，num &amp;gt; 40。所以进行优化，缩小不属于10的整数倍的范围：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">rand10&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#a6e22e">rand7&lt;/span>() &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">rand7&lt;/span>() &lt;span style="color:#75715e">// rand49&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span> &lt;span style="color:#75715e">// rand9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand7&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">num&lt;/span> = (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#75715e">// rand63&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span> = &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#75715e">// rand3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> = &lt;span style="color:#a6e22e">rand7&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">num&lt;/span> = (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#75715e">// rand21&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>